package application.FXController;

import application.hibernate.UserControl;
import application.model.database.User;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import jakarta.persistence.Query;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.net.URL;
import java.util.ResourceBundle;

public class CreateUserController implements Initializable {
    public Button btnCreate;
    public TextField username;
    public TextField password;
    public TextField email;
    public Text existsText;

    private final EntityManagerFactory factory = Persistence.createEntityManagerFactory("VulnerabilityDatabases");
    private final UserControl userControl = new UserControl(factory);


    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
    }

    public void createUser(ActionEvent actionEvent) throws Exception {
        if (checkIfExists()) {
            User user = new User();
            if(username.getText().length() < 2) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Vulnerability Databases");
                alert.setHeaderText("Empty or too short username");
                alert.setContentText("Empty or too short username");
                alert.showAndWait();
                return;
            }
            if(password.getText().length() < 8) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Vulnerability Databases");
                alert.setHeaderText("Password too short");
                alert.setContentText("Password too short");
                alert.showAndWait();
                return;
            }
            if (!isValidEmailAddress(email.getText())){
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Vulnerability Databases");
                alert.setHeaderText("Incompatible email");
                alert.setContentText("Incompatible email");
                alert.showAndWait();
                return;
            }
            String salt = userControl.getSalt();
            user.setUsername(username.getText());
            user.setPassword(userControl.getHashedPassword(password.getText(), salt));
            user.setEmail(email.getText());
            user.setSalt(salt);
            userControl.createUser(user);
            loadLoginWindow();
        } else {
            existsText.setText("User already exists");
            existsText.setVisible(true);
        }
    }

    private boolean checkIfExists() {
        EntityManager em = factory.createEntityManager();
        Query queryName = em.createQuery("SELECT COUNT(u) FROM User u WHERE u.username = :username")
                .setParameter("username", username.getText());
        Query queryEmail = em.createQuery("SELECT COUNT(u) FROM User u WHERE u.email = :email")
                .setParameter("email", email.getText());

        long count = (Long) queryName.getSingleResult() + (Long) queryEmail.getSingleResult();
        return count == 0;
    }

    private void loadLoginWindow() throws Exception {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/LoginPage.fxml"));
        Parent root = loader.load();
        Stage stage = (Stage) btnCreate.getScene().getWindow();
        stage.setScene(new Scene(root));
        stage.show();
    }

    public boolean isValidEmailAddress(String email) {
        String ePattern = "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$";
        java.util.regex.Pattern p = java.util.regex.Pattern.compile(ePattern);
        java.util.regex.Matcher m = p.matcher(email);
        return m.matches();
    }
}
