package application.FXController;

import application.model.DB;
import application.model.VulnLab;
import application.model.database.Items;
import application.model.database.VulnLabModel;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import lombok.Data;
import lombok.EqualsAndHashCode;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;


@EqualsAndHashCode(callSuper = true)
@Data
public class VulnLabController extends DBController implements Runnable{
    @FXML
    private Button btnGoToSiteVulnLab;
    @FXML
    private TableView<VulnLab> tableVulnLab;
    @FXML
    private TableColumn<DB, String> date;
    @FXML
    private TableColumn<DB, String> name;
    @FXML
    private TableColumn<DB, String> type;

    private List<VulnLab> list = new ArrayList<>();
    private MainController mainController;

    @Override
    public void run() {
        search();
    }

    public void injectMainController(MainController mainController) {
        this.mainController = mainController;
    }

    @FXML
    private void handleClicks() throws IOException, URISyntaxException {
        openWebpage(url);
    }

    public void search() {
        VulnLab VulnLab = new VulnLab();
        list = VulnLab.scrape(search);
        getItemId(search);
        if (!list.equals(vulnLabModelToNvd(dbControl.getVulnLabList(itemObj)))) {
            mainController.getVulnLabTab().setStyle("-fx-background-color: red; -fx-border-color: red");
            dbControl.deleteDB(itemObj, 6);
            updateVulnLab(search);
            populateTable(list);
        } else {
            System.out.println("ITS EQUAL VULNLAB");
        }
    }

    public void updateVulnLab(String item) {
        getItemId(item);

        for (VulnLab l : list) {
            VulnLabModel vulnLab = new VulnLabModel();
            vulnLab.setDate(l.getDate());
            vulnLab.setName(l.getName());
            vulnLab.setType(l.getType());
            vulnLab.setItems(itemObj);
            dbControl.addToDB(vulnLab);
        }
    }

    private void populateTable(List<VulnLab> list) {
        date.setCellValueFactory(new PropertyValueFactory<>("date"));
        name.setCellValueFactory(new PropertyValueFactory<>("name"));
        type.setCellValueFactory(new PropertyValueFactory<>("type"));

        ObservableList<VulnLab> data = FXCollections.observableList(list);
        tableVulnLab.setItems(data);
        setWrapCellFactory(date);
        setWrapCellFactory(name);
        setWrapCellFactory(type);
    }

    private List<VulnLab> vulnLabModelToNvd(List<VulnLabModel> list) {
        List<VulnLab> newList = new ArrayList<>();
        for (VulnLabModel n : list) {
            VulnLab vulnLab = new VulnLab(n.getDate(), n.getName(), n.getType());
            newList.add(vulnLab);
        }
        return newList;
    }

    public void populateTable(String listItem) {
        for (Items i : mainController.getItems()) {
            if (i.getItem().equals(listItem)) {
                getItemId(listItem);
                populateTable(vulnLabModelToNvd(dbControl.getVulnLabList(itemObj)));
            }
        }
    }

    public void setUrl(String vuln) {
        this.url = "https://www.vulnerability-lab.com/search.php?search=" + vuln + "&submit=Search";
    }
}
