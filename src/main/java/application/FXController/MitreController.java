package application.FXController;

import application.hibernate.DBControl;
import application.hibernate.ItemControl;
import application.model.Mitre;
import application.model.database.Items;
import application.model.database.MitreModel;
import application.utils.OpenWebpage;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.text.Text;
import lombok.Data;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@Data
public class MitreController {
    @FXML
    private Button btnGoToSiteMitre;
    @FXML
    private TableView<Mitre> tableMitre;
    @FXML
    private TableColumn<Mitre, String> name;
    @FXML
    private TableColumn<Mitre, String> description;

    private List<Mitre> list = new ArrayList<>();
    private String url;
    private List<Items> items;
    private Items itemObj = new Items();

    private MainController mainController;

    private final EntityManagerFactory factory = Persistence.createEntityManagerFactory("VulnerabilityDatabases");
    private final DBControl dbControl = new DBControl(factory);
    private final ItemControl itemControl = new ItemControl(factory);

    public void injectMainController(MainController mainController) {
        this.mainController = mainController;
    }


    @FXML
    private void handleClicks(ActionEvent actionEvent) throws IOException, URISyntaxException {
        if (actionEvent.getSource() == btnGoToSiteMitre && url != null) {
            OpenWebpage.openWebpage(url);
        }
    }

    public void search(String item) {
        Mitre Mitre = new Mitre();
        list = Mitre.mitreScrape(item);
        getItemId(item);
        if (!list.equals(mitreModelToMitre(dbControl.getMitreList(itemObj)))) {
            mainController.getMitreTab().setStyle("-fx-background-color: red; -fx-border-color: red");
            dbControl.deleteMitre(itemObj);
            updateMitre(item);
            populateTable(list);
        }
    }

    public void updateMitre(String item) {
        getItemId(item);

        for (Mitre l : list) {
            MitreModel mitre = new MitreModel();
            mitre.setName(l.getName());
            mitre.setDescription(l.getDescription());
            mitre.setItems(itemObj);
            dbControl.addMitreToDB(mitre);
        }
    }

    private void populateTable(List<Mitre> list) {
        name.setCellValueFactory(new PropertyValueFactory<>("name"));
        description.setCellValueFactory(new PropertyValueFactory<>("description"));

        ObservableList<Mitre> data = FXCollections.observableList(list);
        tableMitre.setItems(data);
        setWrapCellFactory(name);
        setWrapCellFactory(description);
    }

    private void setWrapCellFactory(TableColumn<Mitre, String> table) {
        table.setCellFactory(tablecol -> {
            TableCell<Mitre, String> cell = new TableCell<>();
            Text text = new Text();
            cell.setGraphic(text);
            text.wrappingWidthProperty().bind(cell.widthProperty());
            text.textProperty().bind(cell.itemProperty());
            return cell;
        });
    }

    private List<Mitre> mitreModelToMitre(List<MitreModel> list) {
        List<Mitre> newList = new ArrayList<>();
        for (MitreModel n : list) {
            Mitre mitre = new Mitre(n.getName(), n.getDescription());
            newList.add(mitre);
        }
        return newList;
    }

    public void getItemId(String item) {
        for (Items i : items) {
            if (Objects.equals(i.getItem(), item)) {
                itemObj = i;
                break;
            }
        }
    }

    public void populateTable(String listItem) {
        for (Items i : mainController.getItems()) {
            if (i.getItem().equals(listItem)) {
                getItemId(listItem);
                populateTable(mitreModelToMitre(dbControl.getMitreList(itemObj)));
            }
        }
    }

    public void setUrl(String vuln) {
        this.url = "https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=" + vuln;
    }
}
