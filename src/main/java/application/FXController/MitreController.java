package application.FXController;

import application.model.DB;
import application.model.Mitre;
import application.model.database.Items;
import application.model.database.MitreModel;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import lombok.Data;
import lombok.EqualsAndHashCode;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;

@EqualsAndHashCode(callSuper = true)
@Data
public class MitreController extends DBController implements Runnable{
    @FXML
    private Button btnGoToSiteMitre;
    @FXML
    private TableView<Mitre> tableMitre;
    @FXML
    private TableColumn<DB, String> name;
    @FXML
    private TableColumn<DB, String> description;

    private List<Mitre> list = new ArrayList<>();
    private MainController mainController;

    @Override
    public void run() {
        search();
    }

    public void injectMainController(MainController mainController) {
        this.mainController = mainController;
    }

    @FXML
    private void handleClicks() throws IOException, URISyntaxException {
        openWebpage(url);
    }

    public void search() {
        Mitre Mitre = new Mitre();
        list = Mitre.scrape(search);
        getItemId(search);
        if (!list.equals(mitreModelToMitre(dbControl.getMitreList(itemObj)))) {
            mainController.getMitreTab().setStyle("-fx-background-color: red; -fx-border-color: red");
            dbControl.deleteDB(itemObj, 2);
            updateMitre(search);
            populateTable(list);
        }
    }

    public void updateMitre(String item) {
        getItemId(item);

        for (Mitre l : list) {
            MitreModel mitre = new MitreModel();
            mitre.setName(l.getName());
            mitre.setDescription(l.getDescription());
            mitre.setItems(itemObj);
            dbControl.addToDB(mitre);
        }
    }

    private void populateTable(List<Mitre> list) {
        name.setCellValueFactory(new PropertyValueFactory<>("name"));
        description.setCellValueFactory(new PropertyValueFactory<>("description"));

        ObservableList<Mitre> data = FXCollections.observableList(list);
        tableMitre.setItems(data);
        setWrapCellFactory(name);
        setWrapCellFactory(description);
    }

    private List<Mitre> mitreModelToMitre(List<MitreModel> list) {
        List<Mitre> newList = new ArrayList<>();
        for (MitreModel n : list) {
            Mitre mitre = new Mitre(n.getName(), n.getDescription());
            newList.add(mitre);
        }
        return newList;
    }

    public void populateTable(String listItem) {
        for (Items i : mainController.getItems()) {
            if (i.getItem().equals(listItem)) {
                getItemId(listItem);
                populateTable(mitreModelToMitre(dbControl.getMitreList(itemObj)));
            }
        }
    }

    public void setUrl(String vuln) {
        this.url = "https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=" + vuln;
    }
}
