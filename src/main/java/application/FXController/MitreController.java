package application.FXController;

import application.model.Mitre;
import application.utils.OpenWebpage;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.KeyCode;
import javafx.scene.text.Text;
import lombok.Data;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;

@Data
public class MitreController {
    @FXML
    private TextField mitreSearch;
    @FXML
    private Label countMitre;
    @FXML
    private TableView<Mitre> tableMitre;
    @FXML
    private Button btnGoToSiteMitre;
    @FXML
    private TableColumn<Mitre, String> name;
    @FXML
    private TableColumn<Mitre, String> description;

    private List<Mitre> list = new ArrayList<>();
    private String url;

    private MainController mainController;

    public void injectMainController(MainController mainController) {
        this.mainController = mainController;
    }

    @FXML
    public void mitreSearch() {
        mitreSearch.setOnKeyPressed(
                keyEvent -> {
                    if (keyEvent.getCode().equals(KeyCode.ENTER)) {
                        search(mitreSearch.getText());
                    }
                }
        );
    }

    @FXML
    public void mitreSearchIcon() {
        if (!mitreSearch.getText().isEmpty()) {
            search(mitreSearch.getText());
        }
    }


    @FXML
    private void handleClicks(ActionEvent actionEvent) throws IOException, URISyntaxException {
        if (actionEvent.getSource() == btnGoToSiteMitre && url != null) {
            OpenWebpage.openWebpage(url);
        }
    }

    public void search(String text) {
        Mitre Mitre = new Mitre();
        list = Mitre.mitreScrape(text);
        url = Mitre.getURL();
        populateTable(list);
    }

    private void populateTable(List<Mitre> list) {
        name.setCellValueFactory(new PropertyValueFactory<>("name"));
        description.setCellValueFactory(new PropertyValueFactory<>("description"));

        ObservableList<Mitre> data = FXCollections.observableList(list);
        tableMitre.setItems(data);
        setWrapCellFactory(name);
        setWrapCellFactory(description);
        int countResults = list.size();
        countMitre.setText(Integer.toString(countResults));
    }

    private void setWrapCellFactory(TableColumn<Mitre, String> table) {
        table.setCellFactory(tablecol -> {
            TableCell<Mitre, String> cell = new TableCell<>();
            Text text = new Text();
            cell.setGraphic(text);
            text.wrappingWidthProperty().bind(cell.widthProperty());
            text.textProperty().bind(cell.itemProperty());
            return cell;
        });
    }
}
