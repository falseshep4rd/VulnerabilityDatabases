package application.FXController;

import application.hibernate.ItemControl;
import application.model.*;
import application.model.database.Items;
import application.model.database.User;
import application.utils.ExportList;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import jakarta.persistence.Query;
import javafx.application.Platform;
import javafx.beans.property.ListProperty;
import javafx.beans.property.SimpleListProperty;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import lombok.Data;

import java.util.ArrayList;
import java.util.List;

@Data
public class SearchController {
    @FXML
    public TextField mainSearch;
    public ListView<String> vulnList;
    private ListProperty<String> listProperty = new SimpleListProperty<>();

    private MainController mainController;
    private EntityManagerFactory factory = Persistence.createEntityManagerFactory("VulnerabilityDatabases");
    private ItemControl itemControl = new ItemControl(factory);
    private List<Items> items;
    private User user;

    public void injectMainController(MainController mainController) {
        this.mainController = mainController;
    }

    public void mainSearch(KeyEvent keyEvent) {
        if (keyEvent.getCode().equals(KeyCode.ENTER)) {
            if (!mainSearch.getText().equals("")) {
                addItems();
                mainController.populateList();
            }
        }
    }

    @FXML
    public void refresh() {
        for(Items i : items) {
            mainController.getNvdController().setItems(items);
            mainController.getNvdController().search(i.getItem());
        }
    }

    @FXML
    private void search() {
        mainController.getNvdController().search(mainSearch.getText());
        mainController.getSnykController().search(mainSearch.getText());
        mainController.getWireSharkController().search(mainSearch.getText());
        mainController.getMitreController().search(mainSearch.getText());
        mainController.getInvictiController().search(mainSearch.getText());
        mainController.getVulnLabController().search(mainSearch.getText());
        mainController.getCxSecurityController().search(mainSearch.getText());
    }

    public void exit() {
        Platform.exit();
        System.exit(0);
    }

    public void export(ActionEvent actionEvent) {
        ExportList exportList = new ExportList();
        ArrayList<NVD> nvdArrayList = (ArrayList<NVD>) mainController.getNvdController().getList();
        ArrayList<SnykDB> snykDBArrayList = (ArrayList<SnykDB>) mainController.getSnykController().getList();
        ArrayList<WireShark> wireSharkArrayList = (ArrayList<WireShark>) mainController.getWireSharkController().getList();
        ArrayList<Mitre> mitreArrayList = (ArrayList<Mitre>) mainController.getMitreController().getList();
        ArrayList<Invicti> invictiArrayList = (ArrayList<Invicti>) mainController.getInvictiController().getList();
        ArrayList<VulnLab> vulnLabArrayList = (ArrayList<VulnLab>) mainController.getVulnLabController().getList();
        ArrayList<CxSecurity> cxSecurityArrayList = (ArrayList<CxSecurity>) mainController.getCxSecurityController().getList();

        exportList.toExcel(nvdArrayList, snykDBArrayList, wireSharkArrayList, mitreArrayList, invictiArrayList, vulnLabArrayList, cxSecurityArrayList);
    }

    private void addItems() {
        if (checkIfExists()) {
            Items item = new Items();
            item.setItem(mainSearch.getText());
            item.setUser(user);
            itemControl.addItem(item);
            items.add(item);
            mainController.getNvdController().setItems(items);
            mainController.getNvdController().search(mainSearch.getText());
        } else {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Vulnerability Databases");
            alert.setHeaderText("Item already exists");
            alert.setContentText("Item already exists");
            alert.showAndWait();
        }

    }

    private boolean checkIfExists() {
        EntityManager em = factory.createEntityManager();
        try {
            Query query = em.createQuery("SELECT COUNT(u) FROM Items u WHERE u.item = :item AND u.user = :user")
                    .setParameter("item", mainSearch.getText())
                    .setParameter("user", user);

            long count = (Long) query.getSingleResult();
            return count == 0;
        } finally {
            em.close();
        }
    }
}
