package application.FXController;

import application.hibernate.ItemControl;
import application.model.database.Items;
import application.model.database.User;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import jakarta.persistence.Query;
import javafx.beans.property.ListProperty;
import javafx.beans.property.SimpleListProperty;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.stage.Stage;
import lombok.Data;

import java.io.IOException;
import java.util.List;

@Data
public class SearchController {
    @FXML
    public TextField mainSearch;
    @FXML
    public ListView<String> vulnList;
    @FXML
    public Button logout;

    private final EntityManagerFactory factory = Persistence.createEntityManagerFactory("VulnerabilityDatabases");
    private final ItemControl itemControl = new ItemControl(factory);

    private ListProperty<String> listProperty = new SimpleListProperty<>();
    private MainController mainController;
    private List<Items> items;
    private User user;

    public void injectMainController(MainController mainController) {
        this.mainController = mainController;
    }

    public void mainSearch(KeyEvent keyEvent) {
        if (keyEvent.getCode().equals(KeyCode.ENTER)) {
            if (!mainSearch.getText().equals("")) {
                addItems();
                mainController.populateList();
            }
        }
    }

    @FXML
    public void refresh() {
        for(Items i : items) {
            mainController.getNvdController().setItems(items);
            mainController.getNvdController().search(i.getItem());

            mainController.getMitreController().setItems(items);
            mainController.getMitreController().search(i.getItem());
        }
    }

//    @FXML
//    private void search() {
//        mainController.getNvdController().search(mainSearch.getText());
//        mainController.getSnykController().search(mainSearch.getText());
//        mainController.getWireSharkController().search(mainSearch.getText());
//        mainController.getMitreController().search(mainSearch.getText());
//        mainController.getInvictiController().search(mainSearch.getText());
//        mainController.getVulnLabController().search(mainSearch.getText());
//        mainController.getCxSecurityController().search(mainSearch.getText());
//    }

    private void addItems() {
        if (checkIfExists()) {
            Items item = new Items();
            item.setItem(mainSearch.getText());
            item.setUser(user);
            itemControl.addItem(item);
            items.add(item);

            addItemsDB();
        } else {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Vulnerability Databases");
            alert.setHeaderText("Item already exists");
            alert.setContentText("Item already exists");
            alert.showAndWait();
        }

    }

    private void addItemsDB(){
        mainController.getNvdController().setItems(items);
        mainController.getNvdController().search(mainSearch.getText());
        mainController.getMitreController().setItems(items);
        mainController.getMitreController().search(mainSearch.getText());
    }

    private boolean checkIfExists() {
        EntityManager em = factory.createEntityManager();
        try {
            Query query = em.createQuery("SELECT COUNT(u) FROM Items u WHERE u.item = :item AND u.user = :user")
                    .setParameter("item", mainSearch.getText())
                    .setParameter("user", user);
            long count = (Long) query.getSingleResult();
            return count == 0;
        } finally {
            em.close();
        }
    }

    public void logout() throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/LoginPage.fxml"));
        Parent root = loader.load();

        Stage stage = (Stage) logout.getScene().getWindow();
        stage.setScene(new Scene(root));
        stage.show();
    }
}
