package application.FXController;

import application.hibernate.ItemControl;
import application.model.database.Items;
import application.model.database.User;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.beans.binding.Bindings;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.input.ContextMenuEvent;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.text.Text;
import javafx.util.Duration;
import lombok.Data;

import java.util.ArrayList;
import java.util.List;

@Data
public class MainController {
    @FXML
    public Tab mitreTab;
    @FXML
    public Tab nvdTab;
    @FXML
    public Tab wireSharkTab;
    @FXML
    public Tab snykDBTab;
    @FXML
    public Tab invictiTab;
    @FXML
    public Tab vulnLabTab;
    @FXML
    private Text username;
    @FXML
    private NvdController nvdController;
    @FXML
    private SnykController snykController;
    @FXML
    private SearchController searchController;
    @FXML
    private WireSharkController wireSharkController;
    @FXML
    private MitreController mitreController;
    @FXML
    private InvictiController invictiController;
    @FXML
    private VulnLabController vulnLabController;
    @FXML
    private ListView<String> vulnList;

    private User user;
    private List<Items> items;
    private List<String> itemsString = new ArrayList<>();
    private EntityManagerFactory factory = Persistence.createEntityManagerFactory("VulnerabilityDatabases");
    private ItemControl itemControl = new ItemControl(factory);


    @FXML
    public void initialize() {
        nvdController.injectMainController(this);
        snykController.injectMainController(this);
        searchController.injectMainController(this);
        wireSharkController.injectMainController(this);
        mitreController.injectMainController(this);
        invictiController.injectMainController(this);
        vulnLabController.injectMainController(this);
    }

    public void setUsername(String username) {
        this.username.setText(username);
    }

    public void populateList() {
        items = itemControl.getItems(user);
        vulnList.getItems().clear();
        for (Items i : items) {
            itemsString.add(i.getItem());
        }
        searchController.setItems(items);
        searchController.setUser(user);
        ObservableList<String> data = FXCollections.observableList(itemsString);
        vulnList.setItems(data);
    }

    public void checkForNewEntries(){
        Timeline timeline = new Timeline(new KeyFrame(
                Duration.seconds(2),
                actionEvent -> searchController.refresh()),
                new KeyFrame(Duration.hours(1)));
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();
    }

    public void deleteItem(ContextMenuEvent contextMenuEvent) {
        vulnList.setCellFactory(lv -> {

            ListCell<String> cell = new ListCell<>();

            ContextMenu contextMenu = new ContextMenu();

            MenuItem deleteItem = new MenuItem();
            deleteItem.textProperty().bind(Bindings.format("Delete \"%s\"", cell.itemProperty()));
            deleteItem.setOnAction(event -> {
                String selectedItem = vulnList.getSelectionModel().getSelectedItem();
                for (Items i : items) {
                    if (i.getItem().equals(selectedItem)) {
                        itemControl.deleteItem(i.getId());
                    }
                }
                vulnList.getItems().remove(cell.getItem());
            });
            contextMenu.getItems().addAll(deleteItem);
            cell.textProperty().bind(cell.itemProperty());
            cell.emptyProperty().addListener((obs, wasEmpty, isNowEmpty) -> {
                if (isNowEmpty) {
                    cell.setContextMenu(null);
                } else {
                    cell.setContextMenu(contextMenu);
                }
            });
            return cell;
        });
    }

    public void populateTables(MouseEvent mouseEvent) {
        if (mouseEvent.getButton() == MouseButton.PRIMARY && mouseEvent.getClickCount() == 2) {
            String item = vulnList.getSelectionModel().getSelectedItem();
            nvdController.setItems(items);
            nvdController.populateTable(item);
            nvdController.setUrl(item);
            mitreController.setItems(items);
            mitreController.populateTable(item);
            mitreController.setUrl(item);
            wireSharkController.setItems(items);
            wireSharkController.populateTable(item);
            wireSharkController.setUrl(item);
            snykController.setItems(items);
            snykController.populateTable(item);
            snykController.setUrl(item);
            invictiController.setItems(items);
            invictiController.populateTable(item);
            invictiController.setUrl(item);
            vulnLabController.setItems(items);
            vulnLabController.populateTable(item);
            vulnLabController.setUrl(item);
        }
    }

    public void changeColorNVD(Event event) {
        nvdTab.setStyle("-fx-background-color: #10165F; -fx-border-color: #10165F");
    }

    public void changeColorWireShark(Event event) {
        wireSharkTab.setStyle("-fx-background-color: #10165F; -fx-border-color: #10165F");
    }

    public void changeColorMitre(Event event) {
        mitreTab.setStyle("-fx-background-color: #fdb416; -fx-border-color: #fdb416");
    }

    public void changeColorSnykDB(Event event) {
        snykDBTab.setStyle("-fx-background-color: #10165F; -fx-border-color: #10165F;");
    }

    public void changeColorInvicti(Event event) {
        invictiTab.setStyle("-fx-background-color: #659e1b; -fx-border-color: #10165F;");
    }

    public void changeColorVulnLab(Event event) {
        vulnLabTab.setStyle("-fx-background-color: white; -fx-border-color: #10165F;");
    }
}