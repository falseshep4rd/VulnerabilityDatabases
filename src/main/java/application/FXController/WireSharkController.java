package application.FXController;

import application.hibernate.DBControl;
import application.hibernate.ItemControl;
import application.model.WireShark;
import application.model.database.Items;
import application.model.database.WireSharkModel;
import application.utils.OpenWebpage;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.text.Text;
import lombok.Data;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@Data
public class WireSharkController {
    @FXML
    private Button btnGoToSiteWireShark;
    @FXML
    private TableView<WireShark> tableWireShark;
    @FXML
    private TableColumn<WireShark, String> id;
    @FXML
    private TableColumn<WireShark, String> summary;
    @FXML
    private TableColumn<WireShark, String> changed;

    private List<WireShark> list = new ArrayList<>();
    private String url;
    private List<Items> items;
    private Items itemObj = new Items();

    private MainController mainController;

    private final EntityManagerFactory factory = Persistence.createEntityManagerFactory("VulnerabilityDatabases");
    private final DBControl dbControl = new DBControl(factory);
    private final ItemControl itemControl = new ItemControl(factory);

    public void injectMainController(MainController mainController) {
        this.mainController = mainController;
    }

    @FXML
    private void handleClicks(ActionEvent actionEvent) throws IOException, URISyntaxException {
        if (actionEvent.getSource() == btnGoToSiteWireShark && url != null) {
            OpenWebpage.openWebpage(url);
        }
    }

    public void search(String item) {
        WireShark wireShark = new WireShark();
        list = wireShark.wireSharkScrape(item);
        getItemId(item);
        if (!list.equals(wireSharkModelToWireShark(dbControl.getWireSharkList(itemObj)))) {
            mainController.getWireSharkTab().setStyle("-fx-background-color: red; -fx-border-color: red");
            dbControl.deleteWireShark(itemObj);
            updateWireShark(item);
            populateTable(list);
        }
    }

    public void updateWireShark(String item) {
        getItemId(item);

        for (WireShark l : list) {
            WireSharkModel nvd = new WireSharkModel();
            nvd.setVulnId(l.getId());
            nvd.setSummary(l.getSummary());
            nvd.setChanged(l.getChanged());
            nvd.setItems(itemObj);
            dbControl.addWireSharkToDB(nvd);
        }
    }

    private void populateTable(List<WireShark> list) {
        id.setCellValueFactory(new PropertyValueFactory<>("id"));
        summary.setCellValueFactory(new PropertyValueFactory<>("summary"));
        changed.setCellValueFactory(new PropertyValueFactory<>("changed"));

        ObservableList<WireShark> data = FXCollections.observableList(list);
        tableWireShark.setItems(data);
        setWrapCellFactory(summary);
        setWrapCellFactory(changed);
    }

    private void setWrapCellFactory(TableColumn<WireShark, String> table) {
        table.setCellFactory(tablecol -> {
            TableCell<WireShark, String> cell = new TableCell<>();
            Text text = new Text();
            cell.setGraphic(text);
            text.wrappingWidthProperty().bind(cell.widthProperty());
            text.textProperty().bind(cell.itemProperty());
            return cell;
        });
    }

    private List<WireShark> wireSharkModelToWireShark(List<WireSharkModel> list) {
        List<WireShark> newList = new ArrayList<>();
        for (WireSharkModel n : list) {
            WireShark nvd = new WireShark(n.getVulnId(), n.getSummary(), n.getChanged());
            newList.add(nvd);
        }
        return newList;
    }

    public void getItemId(String item) {
        for (Items i : items) {
            if (Objects.equals(i.getItem(), item)) {
                itemObj = i;
                break;
            }
        }
    }

    public void populateTable(String listItem) {
        for (Items i : mainController.getItems()) {
            if (i.getItem().equals(listItem)) {
                getItemId(listItem);
                populateTable(wireSharkModelToWireShark(dbControl.getWireSharkList(itemObj)));
            }
        }
    }

    public void setUrl(String vuln) {
        this.url = "https://bugs.wireshark.org/bugzilla/buglist.cgi?quicksearch=" + vuln;
    }
}
