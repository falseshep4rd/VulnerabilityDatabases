package application.FXController;

import application.model.DB;
import application.model.WireShark;
import application.model.database.Items;
import application.model.database.WireSharkModel;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import lombok.Data;
import lombok.EqualsAndHashCode;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;

@EqualsAndHashCode(callSuper = true)
@Data
public class WireSharkController extends DBController implements Runnable{
    @FXML
    private Button btnGoToSiteWireShark;
    @FXML
    private TableView<WireShark> tableWireShark;
    @FXML
    private TableColumn<DB, String> id;
    @FXML
    private TableColumn<DB, String> summary;
    @FXML
    private TableColumn<DB, String> changed;

    private List<WireShark> list = new ArrayList<>();
    private MainController mainController;

    @Override
    public void run() {
        search();
    }

    public void injectMainController(MainController mainController) {
        this.mainController = mainController;
    }

    @FXML
    private void handleClicks() throws IOException, URISyntaxException {
        openWebpage(url);
    }

    public void search() {
        WireShark wireShark = new WireShark();
        list = wireShark.scrape(search);
        getItemId(search);
        if (!list.equals(wireSharkModelToWireShark(dbControl.getWireSharkList(itemObj)))) {
            mainController.getWireSharkTab().setStyle("-fx-background-color: red; -fx-border-color: red");
            dbControl.deleteDB(itemObj, 3);
            updateWireShark(search);
            populateTable(list);
        }
    }

    public void updateWireShark(String item) {
        getItemId(item);

        for (WireShark l : list) {
            WireSharkModel nvd = new WireSharkModel();
            nvd.setVulnId(l.getId());
            nvd.setSummary(l.getSummary());
            nvd.setChanged(l.getChanged());
            nvd.setItems(itemObj);
            dbControl.addToDB(nvd);
        }
    }

    private void populateTable(List<WireShark> list) {
        id.setCellValueFactory(new PropertyValueFactory<>("id"));
        summary.setCellValueFactory(new PropertyValueFactory<>("summary"));
        changed.setCellValueFactory(new PropertyValueFactory<>("changed"));

        ObservableList<WireShark> data = FXCollections.observableList(list);
        tableWireShark.setItems(data);
        setWrapCellFactory(summary);
        setWrapCellFactory(changed);
    }

    private List<WireShark> wireSharkModelToWireShark(List<WireSharkModel> list) {
        List<WireShark> newList = new ArrayList<>();
        for (WireSharkModel n : list) {
            WireShark nvd = new WireShark(n.getVulnId(), n.getSummary(), n.getChanged());
            newList.add(nvd);
        }
        return newList;
    }

    public void populateTable(String listItem) {
        for (Items i : mainController.getItems()) {
            if (i.getItem().equals(listItem)) {
                getItemId(listItem);
                populateTable(wireSharkModelToWireShark(dbControl.getWireSharkList(itemObj)));
            }
        }
    }

    public void setUrl(String vuln) {
        this.url = "https://bugs.wireshark.org/bugzilla/buglist.cgi?quicksearch=" + vuln;
    }
}
