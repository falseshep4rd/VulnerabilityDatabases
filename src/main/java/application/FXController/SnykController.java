package application.FXController;

import application.model.SnykDB;
import application.utils.OpenWebpage;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.KeyCode;
import javafx.scene.text.Text;
import lombok.Data;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;

@Data
public class SnykController {
    @FXML
    public TextField snykSearch;
    @FXML
    public Label countSnyk;
    @FXML
    public Button btnGoToSiteSnyk;
    @FXML
    public TableView<SnykDB> tableSnyk;
    @FXML
    public TableColumn<SnykDB, String> vulnerability;
    @FXML
    public TableColumn<SnykDB, String> affects;
    @FXML
    public TableColumn<SnykDB, String> type;
    @FXML
    public TableColumn<SnykDB, String> published;

    private MainController mainController;

    private List<SnykDB> list = new ArrayList<>();
    private String URL;

    public void injectMainController(MainController mainController) {
        this.mainController = mainController;
    }

    @FXML
    private void SnykSearch() {
        snykSearch.setOnKeyPressed(
                keyEvent -> {
                    if (keyEvent.getCode().equals(KeyCode.ENTER)) {
                        search(snykSearch.getText());
                    }
                }
        );
    }

    @FXML
    private void SnykSearchIcon() {
        if (!snykSearch.getText().isEmpty()) {
            search(snykSearch.getText());
        }
    }


    @FXML
    private void handleClicks(ActionEvent actionEvent) throws IOException, URISyntaxException {
        if (actionEvent.getSource() == btnGoToSiteSnyk && URL != null) {
            OpenWebpage.openWebpage(URL);
        }
    }

    public void search(String text) {
        SnykDB snykDB = new SnykDB();
        list = snykDB.snykDbScrape(text);
        URL = snykDB.getURL();
        populateTable(list);
    }

    private void populateTable(List<SnykDB> list) {
        vulnerability.setCellValueFactory(new PropertyValueFactory<>("vulnerability"));
        affects.setCellValueFactory(new PropertyValueFactory<>("affects"));
        type.setCellValueFactory(new PropertyValueFactory<>("type"));
        published.setCellValueFactory(new PropertyValueFactory<>("published"));

        ObservableList<SnykDB> data = FXCollections.observableList(list);
        tableSnyk.setItems(data);
        setWrapCellFactory(vulnerability);
        int countResults = list.size();
        countSnyk.setText(Integer.toString(countResults));
    }

    private void setWrapCellFactory(TableColumn<SnykDB, String> table) {
        table.setCellFactory(tablecol -> {
            TableCell<SnykDB, String> cell = new TableCell<>();
            Text text = new Text();
            cell.setGraphic(text);
            text.wrappingWidthProperty().bind(cell.widthProperty());
            text.textProperty().bind(cell.itemProperty());
            return cell;
        });
    }
}
