package application.FXController;

import application.hibernate.DBControl;
import application.hibernate.ItemControl;
import application.model.SnykDB;
import application.model.database.Items;
import application.model.database.SnykDBModel;
import application.utils.OpenWebpage;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.text.Text;
import lombok.Data;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@Data
public class SnykController implements Runnable{
    @FXML
    public Button btnGoToSiteSnyk;
    @FXML
    public TableView<SnykDB> tableSnyk;
    @FXML
    public TableColumn<SnykDB, String> vulnerability;
    @FXML
    public TableColumn<SnykDB, String> affects;
    @FXML
    public TableColumn<SnykDB, String> type;
    @FXML
    public TableColumn<SnykDB, String> published;
    
    private List<SnykDB> list = new ArrayList<>();
    private String URL;
    private List<Items> items;
    private Items itemObj = new Items();
    private String search;
    
    private MainController mainController;

    private final EntityManagerFactory factory = Persistence.createEntityManagerFactory("VulnerabilityDatabases");
    private final DBControl dbControl = new DBControl(factory);
    private final ItemControl itemControl = new ItemControl(factory);

    @Override
    public void run() {
        System.out.println(Thread.currentThread().getId());
        search();
    }

    public void injectMainController(MainController mainController) {
        this.mainController = mainController;
    }
    
    @FXML
    private void handleClicks(ActionEvent actionEvent) throws IOException, URISyntaxException {
        if (actionEvent.getSource() == btnGoToSiteSnyk && URL != null) {
            OpenWebpage.openWebpage(URL);
        }
    }

    public void search() {
        SnykDB snykDB = new SnykDB();
        list = snykDB.snykDbScrape(search);
        getItemId(search);
        System.out.println(Thread.currentThread().getId());
        if (!list.equals(snykDbModelToSnykDB(dbControl.getSnykDBList(itemObj)))) {
            mainController.getSnykDBTab().setStyle("-fx-background-color: red; -fx-border-color: red");
            dbControl.deleteSnykDB(itemObj);
            updateSnykDB(search);
            populateTable(list);
        }
    }

    public void updateSnykDB(String item) {
        getItemId(item);

        for (SnykDB l : list) {
            SnykDBModel snykDB = new SnykDBModel();
            snykDB.setVulnerability(l.getVulnerability());
            snykDB.setAffects(l.getAffects());
            snykDB.setType(l.getType());
            snykDB.setPublished(l.getPublished());
            snykDB.setItems(itemObj);
            dbControl.addSnykDBToDB(snykDB);
        }
    }

    private void populateTable(List<SnykDB> list) {
        vulnerability.setCellValueFactory(new PropertyValueFactory<>("vulnerability"));
        affects.setCellValueFactory(new PropertyValueFactory<>("affects"));
        type.setCellValueFactory(new PropertyValueFactory<>("type"));
        published.setCellValueFactory(new PropertyValueFactory<>("published"));

        ObservableList<SnykDB> data = FXCollections.observableList(list);
        tableSnyk.setItems(data);
        setWrapCellFactory(vulnerability);
    }

    private void setWrapCellFactory(TableColumn<SnykDB, String> table) {
        table.setCellFactory(tablecol -> {
            TableCell<SnykDB, String> cell = new TableCell<>();
            Text text = new Text();
            cell.setGraphic(text);
            text.wrappingWidthProperty().bind(cell.widthProperty());
            text.textProperty().bind(cell.itemProperty());
            return cell;
        });
    }

    private List<SnykDB> snykDbModelToSnykDB(List<SnykDBModel> list) {
        List<SnykDB> newList = new ArrayList<>();
        for (SnykDBModel n : list) {
            SnykDB snykDB = new SnykDB(n.getVulnerability(), n.getAffects(), n.getType(), n.getPublished());
            newList.add(snykDB);
        }
        return newList;
    }

    public void getItemId(String item) {
        for (Items i : items) {
            if (Objects.equals(i.getItem(), item)) {
                itemObj = i;
                break;
            }
        }
    }

    public void populateTable(String listItem) {
        for (Items i : mainController.getItems()) {
            if (i.getItem().equals(listItem)) {
                getItemId(listItem);
                populateTable(snykDbModelToSnykDB(dbControl.getSnykDBList(itemObj)));
            }
        }
    }

    public void setUrl(String vuln) {
        this.URL = "https://snykDB.nist.gov/vuln/search/results?form_type=Basic&results_type=overview&query=" + vuln + "&search_type=all&isCpeNameSearch=false";
    }
}
