package application.FXController;

import application.model.DB;
import application.model.NVD;
import application.model.database.Items;
import application.model.database.NVDModel;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import lombok.Data;
import lombok.EqualsAndHashCode;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;

@EqualsAndHashCode(callSuper = true)
@Data
public class NvdController extends DBController implements Runnable{
    @FXML
    private Button btnGoToSiteNVD;
    @FXML
    private TableView<NVD> tableNVD;
    @FXML
    private TableColumn<DB, String> vulnID;
    @FXML
    private TableColumn<DB, String> summary;
    @FXML
    private TableColumn<DB, String> severity;

    private List<NVD> list = new ArrayList<>();
    private MainController mainController;

    @Override
    public void run() {
        search();
    }

    public void injectMainController(MainController mainController) {
        this.mainController = mainController;
    }

    @FXML
    private void handleClicks() throws IOException, URISyntaxException {
        openWebpage(url);
    }

    public void search() {
        NVD nvd = new NVD();
        if(!search.isEmpty()){
            list = nvd.scrape(search);
            getItemId(search);
        }
        if (!list.equals(nvdModelToNvd(dbControl.getNVDList(itemObj)))) {
            mainController.getNvdTab().setStyle("-fx-background-color: red; -fx-border-color: red");
            dbControl.deleteDB(itemObj, 1);
            updateNVD(search);
            populateTable(list);
        } else {
            System.out.println("ITS EQUAL");
        }
    }

    public void updateNVD(String item) {
        getItemId(item);

        for (NVD l : list) {
            NVDModel nvd = new NVDModel();
            nvd.setVulnId(l.getId());
            nvd.setSummary(l.getSummary());
            nvd.setSeverity(l.getSeverity());
            nvd.setItems(itemObj);
            dbControl.addToDB(nvd);
        }
    }

    private void populateTable(List<NVD> list) {
        vulnID.setCellValueFactory(new PropertyValueFactory<>("id"));
        summary.setCellValueFactory(new PropertyValueFactory<>("summary"));
        severity.setCellValueFactory(new PropertyValueFactory<>("severity"));

        ObservableList<NVD> data = FXCollections.observableList(list);
        tableNVD.setItems(data);
        setWrapCellFactory(summary);
        setWrapCellFactory(severity);
    }

    private List<NVD> nvdModelToNvd(List<NVDModel> list) {
        List<NVD> newList = new ArrayList<>();
        for (NVDModel n : list) {
            NVD nvd = new NVD(n.getVulnId(), n.getSummary(), n.getSeverity());
            newList.add(nvd);
        }
        return newList;
    }

    public void populateTable(String listItem) {
        for (Items i : mainController.getItems()) {
            if (i.getItem().equals(listItem)) {
                getItemId(listItem);
                populateTable(nvdModelToNvd(dbControl.getNVDList(itemObj)));
            }
        }
    }

    public void setUrl(String vuln) {
        this.url = "https://nvd.nist.gov/vuln/search/results?form_type=Basic&results_type=overview&query=" + vuln + "&search_type=all&isCpeNameSearch=false";
    }
}
