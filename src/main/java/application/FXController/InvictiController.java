package application.FXController;

import application.model.DB;
import application.model.Invicti;
import application.model.database.InvictiModel;
import application.model.database.Items;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import lombok.Data;
import lombok.EqualsAndHashCode;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;

@EqualsAndHashCode(callSuper = true)
@Data
public class InvictiController extends DBController implements Runnable{
    @FXML
    private Button btnGoToSiteInvicti;
    @FXML
    private TableView<Invicti> tableInvicti;
    @FXML
    private TableColumn<DB, String> name;
    @FXML
    private TableColumn<DB, String> classifications;
    @FXML
    private TableColumn<DB, String> severity;

    private List<Invicti> list = new ArrayList<>();
    private MainController mainController;

    public void injectMainController(MainController mainController) {
        this.mainController = mainController;
    }

    @Override
    public void run() {
        search();
    }
    
    @FXML
    private void handleClicks() throws IOException, URISyntaxException {
        openWebpage(url);
    }

    public void search() {
        Invicti Invicti = new Invicti();
        list = Invicti.scrape(search);
        getItemId(search);
        if (!list.equals(invictiModelToInvicti(dbControl.getInvictiList(itemObj)))) {
            mainController.getInvictiTab().setStyle("-fx-background-color: red; -fx-border-color: red");
            dbControl.deleteDB(itemObj, 5);
            updateInvicti(search);
            populateTable(list);
        } else {
            System.out.println("ITS EQUAL invicti");
        }
    }

    public void updateInvicti(String item) {
        getItemId(item);

        for (Invicti l : list) {
            InvictiModel invicti = new InvictiModel();
            invicti.setName(l.getName());
            invicti.setClassification(l.getClassifications());
            invicti.setSeverity(l.getSeverity());
            invicti.setItems(itemObj);
            dbControl.addToDB(invicti);
        }
    }

    private void populateTable(List<Invicti> list) {
        name.setCellValueFactory(new PropertyValueFactory<>("name"));
        classifications.setCellValueFactory(new PropertyValueFactory<>("classifications"));
        severity.setCellValueFactory(new PropertyValueFactory<>("severity"));

        ObservableList<Invicti> data = FXCollections.observableList(list);
        tableInvicti.setItems(data);
        setWrapCellFactory(name);
        setWrapCellFactory(classifications);
        setWrapCellFactory(severity);
    }

    private List<Invicti> invictiModelToInvicti(List<InvictiModel> list) {
        List<Invicti> newList = new ArrayList<>();
        for (InvictiModel n : list) {
            Invicti invicti = new Invicti(n.getName(), n.getClassification(), n.getSeverity());
            newList.add(invicti);
        }
        return newList;
    }
    
    public void populateTable(String listItem) {
        for (Items i : mainController.getItems()) {
            if (i.getItem().equals(listItem)) {
                getItemId(listItem);
                populateTable(invictiModelToInvicti(dbControl.getInvictiList(itemObj)));
            }
        }
    }
    
    public void setUrl(String vuln) {
        this.url = "https://www.invicti.com/web-vulnerability-scanner/vulnerabilities/?title=" + vuln;
    }
}