package application.hibernate;

import application.model.database.*;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Query;

import java.util.ArrayList;
import java.util.List;

public class DBControl {
    public DBControl(EntityManagerFactory emf) {
        this.emf = emf;
    }

    private final EntityManagerFactory emf;

    public EntityManager getEntityManager() {
        return emf.createEntityManager();
    }

    public void addToDB(DBModel model) {
        EntityManager em = null;
        try {
            em = getEntityManager();
            em.getTransaction().begin();
            em.persist(model);
            em.getTransaction().commit();
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public void deleteDB(Items items, int i) {
        EntityManager em = getEntityManager();
        String dbQuery = "";
        final String DELETE_NVD = "DELETE from NVDModel where items = :id";
        final String DELETE_MITRE = "DELETE from MitreModel where items = :id";
        final String DELETE_WIRESHARK = "DELETE from WireSharkModel where items = :id";
        final String DELETE_SNYK = "DELETE from SnykDBModel where items = :id";

        switch (i) {
            case 1:
                dbQuery = DELETE_NVD;
                break;
            case 2:
                dbQuery = DELETE_MITRE;
                break;
            case 3:
                dbQuery = DELETE_WIRESHARK;
                break;
            case 4:
                dbQuery = DELETE_SNYK;
                break;
            default:
                break;
        }
        try {
            em.getTransaction().begin();
            Query query = em.createQuery(dbQuery)
                    .setParameter("id", items);
            query.executeUpdate();
            em.getTransaction().commit();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public List<NVDModel> getNVDList(Items item) {
        EntityManager em = getEntityManager();
        List<NVDModel> nvdModels = new ArrayList<>();
        try {
            Query query = em.createQuery("Select n from NVDModel n where items =:items")
                    .setParameter("items", item);
            nvdModels = query.getResultList();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            em.close();
        }
        return nvdModels;
    }

    public List<MitreModel> getMitreList(Items item) {
        EntityManager em = getEntityManager();
        List<MitreModel> mitreModels = new ArrayList<>();
        try {
            Query query = em.createQuery("Select n from MitreModel n where items =:items")
                    .setParameter("items", item);
            mitreModels = query.getResultList();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            em.close();
        }
        return mitreModels;
    }

    public List<WireSharkModel> getWireSharkList(Items item) {
        EntityManager em = getEntityManager();
        List<WireSharkModel> wireSharkModels = new ArrayList<>();
        try {
            Query query = em.createQuery("Select n from WireSharkModel n where items =:items")
                    .setParameter("items", item);
            wireSharkModels = query.getResultList();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            em.close();
        }
        return wireSharkModels;
    }

    public List<SnykDBModel> getSnykDBList(Items item) {
        EntityManager em = getEntityManager();
        List<SnykDBModel> snykDBModels = new ArrayList<>();
        try {
            Query query = em.createQuery("Select n from SnykDBModel n where items =:items")
                    .setParameter("items", item);
            snykDBModels = query.getResultList();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            em.close();
        }
        return snykDBModels;
    }
}
