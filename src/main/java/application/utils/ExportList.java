package application.utils;

import application.model.*;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Objects;

public class ExportList {
    public void toExcel(ArrayList<NVD> nvds, ArrayList<SnykDB> snykDBS,
                        ArrayList<WireShark> wireSharks, ArrayList<Mitre> mitres,
                        ArrayList<Invicti> invictis, ArrayList<VulnLab> vulnLabs,
                        ArrayList<CxSecurity> cxSecurities) {
        XSSFWorkbook workbook;
        File file = new File(Objects.requireNonNull(createJFileChooser()));
        if (!file.exists()) {
            workbook = new XSSFWorkbook();
            XSSFSheet sheet1 = workbook.createSheet("National Vulnerability Database");
            XSSFSheet sheet2 = workbook.createSheet("snyk Vulnerability DB");
            XSSFSheet sheet3 = workbook.createSheet("WireShark");
            XSSFSheet sheet4 = workbook.createSheet("Mitre");
            XSSFSheet sheet5 = workbook.createSheet("Invicti");
            XSSFSheet sheet6 = workbook.createSheet("VulnLab");
            XSSFSheet sheet7 = workbook.createSheet("CxSecurity");
            int rownum = 0;
            for (NVD i : nvds) {
                Row row = sheet1.createRow(rownum++);
                Cell cell = row.createCell(0);
                cell.setCellValue(i.getId());

                cell = row.createCell(1);
                cell.setCellValue(i.getSummary());

                cell = row.createCell(2);
                cell.setCellValue(i.getSeverity());
            }
            rownum = 0;
            for (SnykDB i : snykDBS) {
                Row row = sheet2.createRow(rownum++);
                Cell cell = row.createCell(0);
                cell.setCellValue(i.getVulnerability());

                cell = row.createCell(1);
                cell.setCellValue(i.getAffects());

                cell = row.createCell(2);
                cell.setCellValue(i.getType());

                cell = row.createCell(3);
                cell.setCellValue(i.getPublished());
            }
            rownum = 0;
            for (WireShark i : wireSharks) {
                Row row = sheet3.createRow(rownum++);
                Cell cell = row.createCell(0);
                cell.setCellValue(i.getId());

                cell = row.createCell(1);
                cell.setCellValue(i.getSummary());

                cell = row.createCell(2);
                cell.setCellValue(i.getChanged());
            }
            rownum = 0;
            for (Mitre i : mitres) {
                Row row = sheet4.createRow(rownum++);
                Cell cell = row.createCell(0);
                cell.setCellValue(i.getName());

                cell = row.createCell(1);
                cell.setCellValue(i.getDescription());
            }
            rownum = 0;
            for (Invicti i : invictis) {
                Row row = sheet5.createRow(rownum++);
                Cell cell = row.createCell(0);
                cell.setCellValue(i.getName());

                cell = row.createCell(1);
                cell.setCellValue(i.getClassifications());

                cell = row.createCell(2);
                cell.setCellValue(i.getSeverity());
            }
            rownum = 0;
            for (VulnLab i : vulnLabs) {
                Row row = sheet6.createRow(rownum++);
                Cell cell = row.createCell(0);
                cell.setCellValue(i.getDate());

                cell = row.createCell(1);
                cell.setCellValue(i.getName());

                cell = row.createCell(2);
                cell.setCellValue(i.getType());
            }

            rownum = 0;
            for (CxSecurity i : cxSecurities) {
                Row row = sheet7.createRow(rownum++);
                Cell cell = row.createCell(0);
                cell.setCellValue(i.getSeverity());

                cell = row.createCell(1);
                cell.setCellValue(i.getTopic());

                cell = row.createCell(2);
                cell.setCellValue(i.getDate());
            }

            try(FileOutputStream out = new FileOutputStream(file)){
                workbook.write(out);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private String createJFileChooser() {
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Open the file");
        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("Files", ".xlsx");
        fc.setAcceptAllFileFilterUsed(false);
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fc.addChoosableFileFilter(fileFilter);
        fc.setSelectedFile(new File(""));
        int result = fc.showOpenDialog(fc);
        if (result == JFileChooser.APPROVE_OPTION) {
            return fc.getSelectedFile().getAbsolutePath();
        } else {
            return null;
        }
    }
}
